{"0": {
    "doc": "License",
    "title": "License",
    "content": "MICROCHIP SOFTWARE IS PROVIDED SOLELY TO ASSIST YOU IN DEVELOPING PRODUCTS AND SYSTEMS THAT USE MICROCHIP PRODUCTS. DOWNLOAD AND/OR USE OF THE SOFTWARE REQUIRES THAT YOU ACCEPT THIS SOFTWARE LICENSE AGREEMENT. IF YOU DO NOT WISH TO ACCEPT THESE TERMS, DO NOT DOWNLOAD OR USE ANY OF THE SOFTWARE. DOWNLOADING OR USING THE SOFTWARE CONTITUTES YOUR ACCEPTANCE OF THIS SOFTWARE LICENSE AGREEMENT. SOFTWARE LICENSE AGREEMENT . This Software License Agreement (“Agreement”) is an agreement between you (if licensing as an individual) or the entity you represent (if licensing as a business) (“you” or “Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its affiliates including Microchip Technology Ireland Limited, a company organized under the laws of Ireland, with a principal address at Ground Floor, Block W., East Point Business Park, Dublin, Ireland 3 (collectively, “Microchip”) for the Microchip MPLAB Harmony Integrated Software Framework and documentation included in the download or otherwise provided by Microchip to Licensee (collectively, the “Software”). 1. Use. Subject to the terms of this Agreement, Microchip hereby grants Licensee a limited, revocable, non-exclusive, non-transferable, worldwide license to (a) use the Software, and (b) modify the Software provided in source code form, if any (and use and copy modifications of such Software made by Licensee), provided that in each case (with respect to clauses (a) and (b)) Licensee solely uses the Software with Microchip Products, Licensee Products, or other products agreed to by Microchip in writing. Licensee has no right to (i) substitute third party products for Microchip Products, or (ii) except as expressly provided in Section 2 below, sublicense its rights under this Agreement or otherwise disclose or distribute the Software to any third party. Licensee may make a reasonable number of copies of the Software solely as necessary to exercise its license rights in this Section 1. Licensee will not remove or alter any copyright, trademark, or other proprietary notices contained on or in the Software or any copies. “Microchip Products” means those Microchip devices purchased from Microchip or one of its authorized distributors that are identified in the Software, or if not identified in the Software, then such Microchip devices that are consistent with the purpose of the Software, including but not limited to Microchip 32-bit microcontroller and microprocessor devices and the like. “Licensee Products” means products manufactured by or for Licensee that use or incorporate Microchip Products. 2. Subcontractors. If Licensee wishes for its subcontractor to obtain and use the Software in order to provide design, manufacturing, or other services to Licensee: (a) such subcontractor may (i) download and agree to the terms of this Agreement or (ii) contact Microchip directly for a copy of this Agreement and agree to its terms; or (b) Licensee may sublicense the rights described in Section 1 directly to its subcontractor, provided that (i) such subcontractor agrees in writing to the terms of this Agreement - a copy of which will be provided to Microchip upon request, and (ii) Licensee is liable for such subcontractor's acts and omissions. 3. Third Party Software. (a) Third Party Materials. Licensee agrees to comply with third party license terms applicable to Third Party Materials, if any. Microchip will not be held responsible for Licensee's failure to comply with such terms. Microchip has no obligation to provide support or maintenance for Third Party Materials. \"Third Party Materials\" means the third party software, systems, tools, or specifications (including those of a standards setting organization) referenced in, bundled with, or included in the Software. (b) Open Source Components. Notwithstanding the license grant in Section 1 above, Licensee acknowledges that the Software may include Open Source Components. To the extent required by the licenses covering Open Source Components, the terms of such license apply in lieu of the terms of this Agreement. To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, those restrictions will not apply to the Open Source Component. \"Open Source Components\" means components of the Software that are subject to the terms of an Open Source License. \"Open Source License\" means any software license approved as an open source license by the Open Source Initiative or any substantially similar license, including without limitation any license that, as a condition of distribution of the software licensed under such license, requires that the distributor make the software available in source code format. 4. Licensee Obligations. (a) Restrictions. Except as expressly permitted by this Agreement, Licensee agrees that it will not (i) modify or alter the Software or a Microchip Product; (ii) adapt, translate, decompile, reverse engineer, disassemble the Software provided in object code form, any Microchip Product, or any samples or prototypes provided by Microchip, or create derivative works thereof; or (iii) use the Software with any software or other materials that are subject to licenses or restrictions (e.g., Open Source Licenses) that, when combined with the Software, would require Microchip to disclose, license, distribute, or otherwise make all or any part of such Software available to anyone. (b) Indemnity. Licensee will indemnify (and, at Microchip's election, defend) Microchip from and against any and all claims, costs, damages, expenses (including reasonable attorneys' fees), liabilities, and losses, arising out of or related to: (i) Licensee's modification, disclosure, or distribution of the Software or Third Party Materials; (ii) the use, sale, or distribution of Licensee Products; and (iii) an allegation that Licensee Products or Licensee's modification of the Software infringe third party intellectual property rights. (c) Licensee Products. Licensee understands and agrees that Licensee remains responsible for using its independent analysis, evaluation, and judgment in designing Licensee Products and systems and has full and exclusive responsibility to assure the safety of its products and compliance of its products (and of all Microchip Products used in or for such Licensee Products) with applicable laws and requirements. 5. Confidentiality. (a) Licensee agrees that the Software, underlying inventions, algorithms, know-how, and ideas relating to the Software, and any other non-public business or technical information disclosed by Microchip to Licensee are confidential and proprietary information, including information derived therefrom, belonging to Microchip and its licensors (collectively, \"Confidential Information\"). Licensee will use Confidential Information only to exercise its rights and perform its obligations under this Agreement and will take all reasonable measures to protect the secrecy of and avoid unauthorized access, disclosure, and use of Confidential Information. Such measures include, but are not limited to, the highest degree of care that it uses to protect its own information of a similar nature, but not less than reasonable care. Licensee will only disclose Confidential Information to its employees, subcontractors, consultants, auditors and representatives (collectively \"Representatives\") who have a need to know such information and who have use and confidentiality obligations to Licensee at least as restrictive as those set forth in this Agreement. Licensee is responsible for disclosure or misuse of Confidential Information by its Representatives. Use of Confidential Information for personal gain, for the benefit of a third party or to compete with Microchip, whether directly or indirectly, is a breach of this Agreement. Licensee will notify Microchip in writing of any actual or suspected misuse, misappropriation, or unauthorized disclosure of Confidential Information that comes to Licensee's attention. Confidential Information will not include information that: (i) is or becomes publicly available without breach of this Agreement; (ii) is known or becomes known to Licensee from a source other than Microchip without restriction and without breach of this Agreement or violation of Microchip's rights, as demonstrated by credible evidence in existence at the time of disclosure; (iii) is independently developed by Licensee without use of or reference to the Confidential Information, as demonstrated by credible evidence in existence at the time of independent development; or (iv) is disclosed generally to third parties by Microchip without restrictions similar to those contained in this Agreement. Licensee may disclose Confidential Information to the extent required under law, rule, or regulation (including those of any national securities exchange), by subpoena, civil investigative demand, or similar process, or by a court or administrative agency (each a \"Requirement\"'), provided, that to the extent permitted by applicable law, Licensee will provide prompt notice of such Requirement to Microchip to enable Microchip to seek a protective order or otherwise prevent or restrict such disclosure. (b) Return of Materials. Upon Microchip's request and direction, Licensee will promptly return or destroy the Confidential Information, including any physical information or materials provided to Licensee (together with any copies, excerpts, syntheses, CD ROMS, diskettes, etc.), and, in the case of information derived therefrom, provide written certification that all the Confidential Information has been expunged from any such materials or that all such materials have been destroyed. Further, if Licensee or its affiliates become competitors of Microchip, and Microchip notifies Licensee in writing of its status as a competitor in a given market, then Licensee will promptly engage in the return and certification process described above in this Section 5(b). 6. Ownership and Retention of Rights. All rights, title, and interest (including all intellectual property rights) in and to the Software, including any derivative works of the Software and any incremental modifications to the Software whether made by or for Licensee or Microchip (collectively, \"Microchip Property\"), are and will remain the sole and exclusive property of Microchip, whether such Microchip Property is separate or combined with any other products. Licensee, on behalf of itself and its affiliates, agrees to, and does hereby, assign to Microchip or its designee all right, title and interest (including all intellectual property rights) in and to derivative works of and any incremental modifications to the Software. Licensee will take (and will cause its affiliates, their subcontractors, and all related individuals to take) all action as may be reasonably necessary, proper or advisable to perfect and secure the ownership, licenses, intellectual property and other rights of or to Microchip as set forth in this Agreement. All rights not expressly granted under this Agreement are reserved to Microchip and its licensors and suppliers, and there are no implied rights. Licensee retains all right, title, and interest in and to any technology independently developed by Licensee not derived, directly or indirectly, from the Microchip Property or any other item of tangible property provided to Licensee by Microchip hereunder. 7. Termination. This Agreement will start once accepted by Licensee and continue unless and until terminated as provided in this Agreement. This Agreement automatically terminates immediately if Licensee violates the restrictions set forth in Sections 1, 2 or 4(a). Microchip may terminate this Agreement immediately upon notice if (a) Licensee or its affiliates become competitors of Microchip, or (b) Licensee breaches any other term of this Agreement and does not cure such breach within 30 days after receipt of written notice of such breach from Microchip. Upon termination of this Agreement, (i) the license grants in Sections 1 and 2(b) terminate, and (ii) Licensee will return to Microchip or destroy (and certify the destruction of) all Microchip Property and Confidential Information in its possession or under its control, and all copies thereof. The following sections survive termination of this Agreement: 3, 4, 5, 6, 7, 8, 9, 10, 11 and 12. 8. Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (\"Dangerous Applications\"). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. 9. EU Consumers - Applicable Terms. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, THE FOLLOWING PROVISIONS APPLY INSTEAD OF SECTIONS 9 AND 10 BELOW: Microchip and its licensors will not be liable (a) for any loss suffered by Licensee in connection with the Software where such loss was not reasonably foreseeable when the Software was first downloaded by Licensee, even if such loss was the result of negligence or the failure of Microchip and its licensors to comply with this Agreement; or (b) irrespective of the basis of claim, for any loss of revenue, profit or other business or economic loss suffered. Some Software is made available to Licensee free of charge, and Licensee may at any time download further copies without charge to replace the Software initially downloaded and others may require a fee to be downloaded, or to download any further copies. In all circumstances, to the extent liability may lawfully be limited or excluded, the cumulative liability of Microchip and its licensors will not exceed USD$1,000 (or equivalent sum in the currency of the country in which Licensee resides). However, none of the foregoing limits or excludes any liability for death or personal injury arising from negligence, or for fraud, fraudulent misrepresentation or any other cause that by law cannot be excluded and limited. 10. Warranty Disclaimers. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, THE SOFTWARE IS LICENSED ON AN \"AS-IS\" BASIS. MICROCHIP MAKES NO WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER EXPRESS, IMPLIED, STAUTORY OR OTHERWISE, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR NON-INFRINGEMENT AND ANY WARRANTIES THAT MAY ARISE FROM USAGE OF TRADE OR COURSE OF DEALING. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. TECHNICAL ASSISTANCE, IF PROVIDED, WILL NOT EXPAND THESE WARRANTIES. IF CUSTOMER IS A CONSUMER, THE ABOVE WILL NOT ACT TO EXCLUDE YOUR STATUTORY RIGHTS. 11. Limited Liability. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, IN NO EVENT WILL MICROCHIP BE LIABLE, WHETHER IN CONTRACT, WARRANTY, REPRESENTATION, TORT, STRICT LIABILITY, INDEMNITY, CONTRIBUTION OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, PUNITIVE, EXEMPLARY, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER, HOWEVER CAUSED, OR ANY LOSS OF PRODUCTION, COST OF PROCUREMENT OF SUBSTITUTE PRODUCTS OR SERVICES, ANY LOSS OF PROFITS, LOSS OF BUSINESS, LOSS OF USE OR LOSS OF DATA, OR INTERRUPTION OF BUSINESS ARISING OUT OF THIS AGREEMENT, HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, AND NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY. MICROCHIP'S TOTAL AGGREGATE LIABILITY UNDER THIS AGREEMENT WILL NOT EXCEED USD$1,000. 12. General. (a) This Agreement will be governed by and construed in accordance with the laws of the State of Arizona and the United States, without regard to conflicts of law provisions. The parties hereby irrevocably consent to the exclusive personal jurisdiction and venue of the state and federal courts in Maricopa County, Arizona for any dispute relating to this Agreement. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, this Agreement is subject to the laws of the country in which the Software is downloaded, and, to the extent so mandated by such laws, subject to the jurisdiction of the courts of that country. The parties expressly disclaim the applicability of the United Nations Convention on Contracts for the International Sale of Goods in connection with this Agreement. (b) Unless the parties have a mutually executed agreement relating to the licensing of this Software by Microchip to Licensee (\"Signed Agreement\"), this Agreement constitutes the entire agreement between the parties with respect to the Software, and supersedes and replaces prior or contemporaneous written or verbal agreements or communications between the parties regarding the Software, including any purchase orders. If the parties have a Signed Agreement, this Agreement does not supersede or replace that Signed Agreement. This Agreement will not be modified except by a written agreement signed by an authorized representative of Microchip. If any provision of this Agreement is held by a court of competent jurisdiction to be illegal, invalid, or unenforceable, that provision will be limited or eliminated to the minimum extent necessary so that this Agreement will otherwise remain in full force and effect and enforceable. No waiver of any breach of any provision of this Agreement constitutes a waiver of any prior, concurrent, or subsequent breach of the same or any other provisions of this Agreement, and no waiver will be effective unless made in writing and signed by an authorized representative of the waiving party. (c) Licensee agrees to comply with all import and export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (d) This Agreement will bind and inure to the benefit of each party's permitted successors and assigns. Licensee may not assign this Agreement in whole or in part, whether by law or otherwise, without Microchip's prior written consent. Any merger, consolidation, amalgamation, reorganization, transfer of all or substantially all assets or other change in control or majority ownership (\"Change of Control\") is considered an assignment for the purpose of this Section. Any attempt to assign this Agreement without such consent will be null and void. However, Microchip may assign this Agreement to an affiliate, or to another entity in the event of a Change of Control. (e) Licensee acknowledges its breach of any confidentiality or proprietary rights provision of this Agreement would cause Microchip irreparable damage, for which the award of damages would not be an adequate remedy. Licensee, therefore, agrees if Microchip alleges that Licensee has breached or violated any such provisions then Microchip may seek equitable relief, in addition to all other remedies at law or in equity. (f) Authorized representatives of Microchip shall have the right to reasonably inspect Licensee's premises and to audit Licensee's records and inventory of Licensee Products, whether located on Licensee's premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee's adherence to the terms of this Agreement. (g) Consistent with 48 C.F.R. §12.212 or 48 C.F.R. §227.7202-1 through 227.7202-4, as applicable, the Software is being licensed to U.S. Government end users (i) only as Commercial Items, and (ii) with only those rights as are granted to all other end users pursuant to the terms and conditions of the applicable Microchip licenses. To the extent the Software (or a portion thereof) qualifies as 'technical data' as such term is defined in 48 C.F.R. §252.227-7015(a)(5), then its use, duplication, or disclosure by the U.S. Government is subject to the restrictions set forth in subparagraphs (a) through (e) of the Rights in Technical Data clause at 48 C.F.R. §252.227-7015. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199. Questions about this Agreement should be sent to: Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA. ATTN: Marketing. v.3.3.2021 . ",
    "url": "http://localhost:4000/csp_apps_cec173x/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "GPIO interrupt",
    "title": "GPIO interrupt",
    "content": "This example application demonstrate how to generate GPIO interrupt on a pin that is configured to generate an interrupt on either (rising or falling) edge, and indicate the pin status using the LED. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/gpio/gpio_led_on_off_interrupt/readme.html#gpio-interrupt",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#gpio-interrupt"
  },"2": {
    "doc": "GPIO interrupt",
    "title": "Description",
    "content": "This application uses the GPIO Peripheral library to generate callback on when a pin is driven high or low, and drives the GPIO pin connected to the LED to indicate the pin status. Systick timer is configured to generate a periodic interrupt. A GPIO pin (configured as output) is toggled in the systick timer interrupt. The GPIO output pin is connected to the GPIO input pin. A LED is toggled when the GPIO input pin is driven high or low. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/gpio/gpio_led_on_off_interrupt/readme.html#description",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#description"
  },"3": {
    "doc": "GPIO interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/gpio/gpio_led_on_off_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/gpio/gpio_led_on_off_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#downloading-and-building-the-application"
  },"4": {
    "doc": "GPIO interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | Connect the GPIO030 (output pin, on J11 connector, pin 1) to GPIO132 (input pin, on J11 connector, pin 3) | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/gpio/gpio_led_on_off_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#setting-up-the-hardware"
  },"5": {
    "doc": "GPIO interrupt",
    "title": "Running the Application",
    "content": ". | Build and program the application project using its IDE . | The LED is toggled every 250 milliseconds . | . The following table provides the switch and the LED name: . | Board | LED name | . | CEC 1736 Development Board | LED5 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/gpio/gpio_led_on_off_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html#running-the-application"
  },"6": {
    "doc": "GPIO interrupt",
    "title": "GPIO interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/gpio/gpio_led_on_off_interrupt/readme.html",
    "relUrl": "/apps/gpio/gpio_led_on_off_interrupt/readme.html"
  },"7": {
    "doc": "HTM Timeout",
    "title": "HTM (Hibernation Timer) Timeout",
    "content": "This example application demonstrates how to generate periodic timeout using the Hibernation timer peripheral. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/htm/htm_timeout/readme.html#htm-hibernation-timer-timeout",
    "relUrl": "/apps/htm/htm_timeout/readme.html#htm-hibernation-timer-timeout"
  },"8": {
    "doc": "HTM Timeout",
    "title": "Description",
    "content": "This example application generates periodic timeout using the Hibernation peripheral. The Hibernation peripheral is configured to generate a timeout after 1 second. A callback is registered with the Hibernation timer peripheral. In the callback an LED is toggled and the timer period is re-configured to generate another timeout after 1 second thereby resulting in a periodic toggling of LED every 1 second. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/htm/htm_timeout/readme.html#description",
    "relUrl": "/apps/htm/htm_timeout/readme.html#description"
  },"9": {
    "doc": "HTM Timeout",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/htm/htm_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/htm/htm_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/htm/htm_timeout/readme.html#downloading-and-building-the-application"
  },"10": {
    "doc": "HTM Timeout",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | No additional setup is requred to run this demo. | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/htm/htm_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/htm/htm_timeout/readme.html#setting-up-the-hardware"
  },"11": {
    "doc": "HTM Timeout",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe the LED6 (connected to GPIO156) blink at the rate of 1 second | . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/htm/htm_timeout/readme.html#running-the-application",
    "relUrl": "/apps/htm/htm_timeout/readme.html#running-the-application"
  },"12": {
    "doc": "HTM Timeout",
    "title": "HTM Timeout",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/htm/htm_timeout/readme.html",
    "relUrl": "/apps/htm/htm_timeout/readme.html"
  },"13": {
    "doc": "I2C EEPROM read write",
    "title": "I2C EEPROM read write",
    "content": "This example application demonstrates how to use the I2C peripheral to write and read from the I2C serial EEPROM memory. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/i2c_eeprom/readme.html#i2c-eeprom-read-write",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#i2c-eeprom-read-write"
  },"14": {
    "doc": "I2C EEPROM read write",
    "title": "Description",
    "content": "This example uses the I2C peripheral library to write an array of values to the I2C Serial EEPROM and verify the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/i2c_eeprom/readme.html#description",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#description"
  },"15": {
    "doc": "I2C EEPROM read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/i2c/master/i2c_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/i2c_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#downloading-and-building-the-application"
  },"16": {
    "doc": "I2C EEPROM read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Interface the EEPROM 3 click Board by making the following connections: . | Connect a wire from GPIO140 (I2C06_SCL) available on Pin 28 of P4 header to the SCL pin of the EEPROM 3 click board | Connect a wire from GPIO132 (I2C06_SDA) available on Pin 26 of P4 header to the SDA pin of the EEPROM 3 click board | Connect GND and VCC between the EEPROM 3 click Board and the CEC 1736 Development Board | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/i2c_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#setting-up-the-hardware"
  },"17": {
    "doc": "I2C EEPROM read write",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED indicates success or failure: . | The LED is turned ON when the value read from the EEPROM matched with the written value | The LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . The following table provides the LED name: . | Board | LED Name | . | CEC 1736 Development Board | LED5 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/i2c_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html#running-the-application"
  },"18": {
    "doc": "I2C EEPROM read write",
    "title": "I2C EEPROM read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/i2c_eeprom/readme.html",
    "relUrl": "/apps/i2c/master/i2c_eeprom/readme.html"
  },"19": {
    "doc": "SMBUS master read write",
    "title": "SMBUS master read write",
    "content": "This example application demonstrates how to use the SMBUS peripheral to read and write data in master mode. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/smb_read_write/readme.html#smbus-master-read-write",
    "relUrl": "/apps/i2c/master/smb_read_write/readme.html#smbus-master-read-write"
  },"20": {
    "doc": "SMBUS master read write",
    "title": "Description",
    "content": "This example uses the SMBUS peripheral library and demonstrates how application can use the various APIs available to read and write data when the peripheral is configured in master mode . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/smb_read_write/readme.html#description",
    "relUrl": "/apps/i2c/master/smb_read_write/readme.html#description"
  },"21": {
    "doc": "SMBUS master read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/i2c/master/smb_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/smb_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c/master/smb_read_write/readme.html#downloading-and-building-the-application"
  },"22": {
    "doc": "SMBUS master read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Hardware setup requires two boards, one acting as the SMBUS Master and the other as the SMBUS slave. Setting up CEC 1736 Development Board . | Make the following connections between the two CEC 1736 Development Boards: . | Connect a wire between the GPIO140 (I2C06_SCL) pin of both the boards. GPIO140 pin is available on Pin 28 of P4 header | Connect a wire between the GPIO132 (I2C06_SDA) pin of both the boards. GPIO132 pin is available on Pin 26 of P4 header | Connect a GND wire between the two boards | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/smb_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/i2c/master/smb_read_write/readme.html#setting-up-the-hardware"
  },"23": {
    "doc": "SMBUS master read write",
    "title": "Running the Application",
    "content": ". | Build and program apps/i2c/master/smb_read_write/firmware, on the board acting as SMBUS master | Build and Program apps/i2c/slave/smb_read_write/firmware, on the board acting as SMBUS slave | Run application on SMBUS slave board and then run the application on SMBUS master board | LED on the master board indicates success or failure: . | The LED is turned ON when the value read from the SMBUS slave matches with the written value | The LED is turned OFF when the value read from the SMBUS slave did not match with the written value | . | . The following table provides the LED name: . | Board | LED Name | . | CEC 1736 Development Board | LED5 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/smb_read_write/readme.html#running-the-application",
    "relUrl": "/apps/i2c/master/smb_read_write/readme.html#running-the-application"
  },"24": {
    "doc": "SMBUS master read write",
    "title": "SMBUS master read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/master/smb_read_write/readme.html",
    "relUrl": "/apps/i2c/master/smb_read_write/readme.html"
  },"25": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "I2C EEPROM emulation (I2C slave)",
    "content": "This example application demonstrates how to use the I2C peripheral in slave mode. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/i2c_eeprom_emulation/readme.html#i2c-eeprom-emulation-i2c-slave",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#i2c-eeprom-emulation-i2c-slave"
  },"26": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "Description",
    "content": "This example uses the I2C peripheral library in slave mode and emulates an EEPROM of 512 bytes. There are two pages each of size 256 bytes. I2C slave expects two bytes of memory address from the I2C master and the memory address can range from 0x00 to 0x1FF. I2C slave application supports following: . Byte Write: The I2C master sends the slave address, followed by two bytes of memory address. The slave provides the data present at the requested memory address. Page Write: A page write is initiated the same way as a byte write, but the I2C master can write up-to 256 bytes (1 page). If more than 256 bytes are sent by the I2C master to the I2C slave, the memory address will “roll over” and previous data will be overwritten. The address “roll over” during write is from the last byte of the current page to the first byte of the same page. Current Address Read: The internal memory address counter maintains the last address accessed during the last read or write operation, incremented by one. Once the device address with the read/write bit set to one is clocked in and acknowledged by the EEPROM, the data byte at the current address is serially clocked out. After reading the data from the current address, the I2C master sends NAK and generates a STOP condition. Random Read: The I2C master writes the 2 byte memory address and then reads the data from that memory address. After reading the data, the I2C master sends NAK and generates a STOP condition. Sequential Read: Sequential reads are initiated by either a current address read or a random address read. As long as the EEPROM receives an acknowledge, it will continue to increment the memory address and serially clock out sequential data bytes. When the memory address limit is reached (0x1FF), the memory address will “roll over” to 0x00 and the sequential read will continue. The sequential read operation is terminated when the I2C master sends a NAK and generates a STOP condition. To run the application, two evaluation kits will be required - one acting as the I2C master and the other as the I2C slave. The I2C master application to be used for this demo application is available under apps/i2c/master/i2c_eeprom/firmware folder. I2C master writes an array of values to the I2C slave and verifies the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/i2c_eeprom_emulation/readme.html#description",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#description"
  },"27": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/i2c/slave/i2c_eeprom_emulation/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/i2c_eeprom_emulation/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#downloading-and-building-the-application"
  },"28": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Hardware setup requires two boards, one acting as the I2C Master and the other as the I2C slave. Setting up CEC 1736 Development Board . | Make the following connections between the two CEC 1736 Development Boards: . | Connect a wire between the GPIO140 (I2C06_SCL) pin of both the boards. GPIO140 pin is available on Pin 28 of P4 header | Connect a wire between the GPIO132 (I2C06_SDA) pin of both the boards. GPIO132 pin is available on Pin 26 of P4 header | Connect a GND wire between the two boards | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/i2c_eeprom_emulation/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#setting-up-the-hardware"
  },"29": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "Running the Application",
    "content": ". | Build and program I2C EEPROM application from apps/i2c/master/i2c_eeprom/firmware, used as I2C master | Build and Program I2C slave application, used as I2C slave | Run application on I2C slave board and then run the application on I2C master board | LED on the I2C master board indicates success or failure: . | The LED is turned ON when the value read from the I2C slave matches with the written value | The LED is turned OFF when the value read from the I2C slave did not match with the written value | . | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/i2c_eeprom_emulation/readme.html#running-the-application",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html#running-the-application"
  },"30": {
    "doc": "I2C EEPROM emulation (I2C slave)",
    "title": "I2C EEPROM emulation (I2C slave)",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/i2c_eeprom_emulation/readme.html",
    "relUrl": "/apps/i2c/slave/i2c_eeprom_emulation/readme.html"
  },"31": {
    "doc": "SMBUS slave read write",
    "title": "SMBUS slave read write",
    "content": "This example application demonstrates how to use the SMBUS peripheral to read and write data in slave mode. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/smb_read_write/readme.html#smbus-slave-read-write",
    "relUrl": "/apps/i2c/slave/smb_read_write/readme.html#smbus-slave-read-write"
  },"32": {
    "doc": "SMBUS slave read write",
    "title": "Description",
    "content": "This example uses the SMBUS peripheral library and demonstrates how application can use the various APIs available to read and write data when the peripheral is configured in slave mode . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/smb_read_write/readme.html#description",
    "relUrl": "/apps/i2c/slave/smb_read_write/readme.html#description"
  },"33": {
    "doc": "SMBUS slave read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/i2c/slave/smb_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/smb_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/i2c/slave/smb_read_write/readme.html#downloading-and-building-the-application"
  },"34": {
    "doc": "SMBUS slave read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Hardware setup requires two boards, one acting as the SMBUS Master and the other as the SMBUS slave. Setting up CEC 1736 Development Board . | Make the following connections between the two CEC 1736 Development Boards: . | Connect a wire between the GPIO140 (I2C06_SCL) pin of both the boards. GPIO140 pin is available on Pin 28 of P4 header | Connect a wire between the GPIO132 (I2C06_SDA) pin of both the boards. GPIO132 pin is available on Pin 26 of P4 header | Connect a GND wire between the two boards | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/smb_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/i2c/slave/smb_read_write/readme.html#setting-up-the-hardware"
  },"35": {
    "doc": "SMBUS slave read write",
    "title": "Running the Application",
    "content": ". | Build and program apps/i2c/master/smb_read_write/firmware, on the board acting as SMBUS master | Build and Program apps/i2c/slave/smb_read_write/firmware, on the board acting as SMBUS slave | Run application on SMBUS slave board and then run the application on SMBUS master board | LED on the master board indicates success or failure: . | The LED is turned ON when the value read from the SMBUS slave matches with the written value | The LED is turned OFF when the value read from the SMBUS slave did not match with the written value | . | . The following table provides the LED name: . | Board | LED Name | . | CEC 1736 Development Board | LED5 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/smb_read_write/readme.html#running-the-application",
    "relUrl": "/apps/i2c/slave/smb_read_write/readme.html#running-the-application"
  },"36": {
    "doc": "SMBUS slave read write",
    "title": "SMBUS slave read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/i2c/slave/smb_read_write/readme.html",
    "relUrl": "/apps/i2c/slave/smb_read_write/readme.html"
  },"37": {
    "doc": "LED Breathing",
    "title": "LED Breathing",
    "content": "This example application demonstrates how to generate a breathing LED pattern using the Breathing LED peripheral. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/led/led_breathing/readme.html#led-breathing",
    "relUrl": "/apps/led/led_breathing/readme.html#led-breathing"
  },"38": {
    "doc": "LED Breathing",
    "title": "Description",
    "content": "This example application generates a symmetrical breathing LED output. The peripheral is configured to generate a breathing LED output with a ramp up and ramp down time of 1.84 seconds with a total period of 5.26 seconds. The high delay (PWM cycles to wait once the duty cycle reaches MAX value) is set to 100. Similarly the low delay (PWM cycles to wait once the duty cycle reaches MIN value) is set to 100. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/led/led_breathing/readme.html#description",
    "relUrl": "/apps/led/led_breathing/readme.html#description"
  },"39": {
    "doc": "LED Breathing",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/led/led_breathing/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/led/led_breathing/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/led/led_breathing/readme.html#downloading-and-building-the-application"
  },"40": {
    "doc": "LED Breathing",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | No additional setup is requred to run this demo. | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/led/led_breathing/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/led/led_breathing/readme.html#setting-up-the-hardware"
  },"41": {
    "doc": "LED Breathing",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe the breathing LED pattern | . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/led/led_breathing/readme.html#running-the-application",
    "relUrl": "/apps/led/led_breathing/readme.html#running-the-application"
  },"42": {
    "doc": "LED Breathing",
    "title": "LED Breathing",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/led/led_breathing/readme.html",
    "relUrl": "/apps/led/led_breathing/readme.html"
  },"43": {
    "doc": "PWM Duty Cycle",
    "title": "PWM Duty Cycle",
    "content": "This example application demonstrates how to generate PWM output using the PWM peripheral. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/pwm/pwm_duty_cycle/readme.html#pwm-duty-cycle",
    "relUrl": "/apps/pwm/pwm_duty_cycle/readme.html#pwm-duty-cycle"
  },"44": {
    "doc": "PWM Duty Cycle",
    "title": "Description",
    "content": "This example application demonstrates how to use the PWM peripheral to generate a PWM signal and vary the duty cycle at run time. The demo is initially configured to generate a PWM output of 4800 Hz frequency and a duty cycle of 1%. At run time, based on the user input on the console, the duty cycle is incremented or decremented in steps of 1% while keeping the frequency of PWM output same. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/pwm/pwm_duty_cycle/readme.html#description",
    "relUrl": "/apps/pwm/pwm_duty_cycle/readme.html#description"
  },"45": {
    "doc": "PWM Duty Cycle",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/pwm/pwm_duty_cycle/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/pwm/pwm_duty_cycle/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/pwm/pwm_duty_cycle/readme.html#downloading-and-building-the-application"
  },"46": {
    "doc": "PWM Duty Cycle",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | GPIO053 is configured as the PWM output pin and is available on Pin 20 of P4 connector. Connect a logic analyzer or an oscilloscope to observe the PWM output. | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/pwm/pwm_duty_cycle/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/pwm/pwm_duty_cycle/readme.html#setting-up-the-hardware"
  },"47": {
    "doc": "PWM Duty Cycle",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Verify the initial PWM output frequency is 4800 Hz and the duty cycle is 1%. | Press ‘+’ on the console to increment the duty cycle by 1%. Press ‘-‘ to decrement the duty cycle by 1%. | Verify that the duty cycle measured by the logic analyzer is same as that mentioned on the console. | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/pwm/pwm_duty_cycle/readme.html#running-the-application",
    "relUrl": "/apps/pwm/pwm_duty_cycle/readme.html#running-the-application"
  },"48": {
    "doc": "PWM Duty Cycle",
    "title": "PWM Duty Cycle",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/pwm/pwm_duty_cycle/readme.html",
    "relUrl": "/apps/pwm/pwm_duty_cycle/readme.html"
  },"49": {
    "doc": "QMSPI flash read write",
    "title": "QMSPI flash read write",
    "content": "This example shows how to use the QMSPI Peripheral library to perform erase, write and read operation with the QMSPI Serial Flash memory in Quad IO mode. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/qmspi/qmspi_read_write/readme.html#qmspi-flash-read-write",
    "relUrl": "/apps/qmspi/qmspi_read_write/readme.html#qmspi-flash-read-write"
  },"50": {
    "doc": "QMSPI flash read write",
    "title": "Description",
    "content": "This example uses the QMSPI peripheral library to erase and write an array of values to the QMSPI Serial Flash memory. It verifies the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/qmspi/qmspi_read_write/readme.html#description",
    "relUrl": "/apps/qmspi/qmspi_read_write/readme.html#description"
  },"51": {
    "doc": "QMSPI flash read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/qmspi/qmspi_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/qmspi/qmspi_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/qmspi/qmspi_read_write/readme.html#downloading-and-building-the-application"
  },"52": {
    "doc": "QMSPI flash read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/qmspi/qmspi_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/qmspi/qmspi_read_write/readme.html#setting-up-the-hardware"
  },"53": {
    "doc": "QMSPI flash read write",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED indicates success or failure: . | The LED is turned ON when the value read from the QSPI Serial Flash memory matched with the written value | The LED is turned OFF when the value read from the QSPI Serial Flash did not match with the written value | . | . The following table provides the LED names . | Board | LED Name | . | CEC 1736 Development Board | LED5 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/qmspi/qmspi_read_write/readme.html#running-the-application",
    "relUrl": "/apps/qmspi/qmspi_read_write/readme.html#running-the-application"
  },"54": {
    "doc": "QMSPI flash read write",
    "title": "QMSPI flash read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/qmspi/qmspi_read_write/readme.html",
    "relUrl": "/apps/qmspi/qmspi_read_write/readme.html"
  },"55": {
    "doc": "RTOS Timer",
    "title": "RTOS Timer",
    "content": "This example application demonstrates how to generate periodic timeout using the RTOS timer peripheral. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/rtos/rtos_timer/readme.html#rtos-timer",
    "relUrl": "/apps/rtos/rtos_timer/readme.html#rtos-timer"
  },"56": {
    "doc": "RTOS Timer",
    "title": "Description",
    "content": "This example application generates periodic timeout using the RTOS peripheral. The RTOS peripheral is configured to generate a periodic timeout every 1 second. A callback is registed with the RTOS timer and an LED is toggled in the callback function. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/rtos/rtos_timer/readme.html#description",
    "relUrl": "/apps/rtos/rtos_timer/readme.html#description"
  },"57": {
    "doc": "RTOS Timer",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtos/rtos_timer/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/rtos/rtos_timer/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtos/rtos_timer/readme.html#downloading-and-building-the-application"
  },"58": {
    "doc": "RTOS Timer",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | No additional setup is requred to run this demo. | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/rtos/rtos_timer/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtos/rtos_timer/readme.html#setting-up-the-hardware"
  },"59": {
    "doc": "RTOS Timer",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe the LED6 (connected to GPIO156) blink at the rate of 1 second | . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/rtos/rtos_timer/readme.html#running-the-application",
    "relUrl": "/apps/rtos/rtos_timer/readme.html#running-the-application"
  },"60": {
    "doc": "RTOS Timer",
    "title": "RTOS Timer",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/rtos/rtos_timer/readme.html",
    "relUrl": "/apps/rtos/rtos_timer/readme.html"
  },"61": {
    "doc": "Timer32 periodic timeout",
    "title": "Timer32 Periodic Timeout",
    "content": "This example application demonstrates how to generate periodic timeout using the TIMER32 timer peripheral. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/timer32/tmr32_periodic_timeout/readme.html#timer32-periodic-timeout",
    "relUrl": "/apps/timer32/tmr32_periodic_timeout/readme.html#timer32-periodic-timeout"
  },"62": {
    "doc": "Timer32 periodic timeout",
    "title": "Description",
    "content": "This example application generates periodic timeout using the TIMER32 peripheral. The TIMER32 peripheral is configured to generate a periodic timeout every 1 second. A callback is registered with the TIMER32 timer and an LED is toggled in the callback function. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/timer32/tmr32_periodic_timeout/readme.html#description",
    "relUrl": "/apps/timer32/tmr32_periodic_timeout/readme.html#description"
  },"63": {
    "doc": "Timer32 periodic timeout",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/timer32/tmr32_periodic_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/timer32/tmr32_periodic_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/timer32/tmr32_periodic_timeout/readme.html#downloading-and-building-the-application"
  },"64": {
    "doc": "Timer32 periodic timeout",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | No additional setup is requred to run this demo. | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/timer32/tmr32_periodic_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/timer32/tmr32_periodic_timeout/readme.html#setting-up-the-hardware"
  },"65": {
    "doc": "Timer32 periodic timeout",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe the LED6 (connected to GPIO156) blink at the rate of 1 second | . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/timer32/tmr32_periodic_timeout/readme.html#running-the-application",
    "relUrl": "/apps/timer32/tmr32_periodic_timeout/readme.html#running-the-application"
  },"66": {
    "doc": "Timer32 periodic timeout",
    "title": "Timer32 periodic timeout",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/timer32/tmr32_periodic_timeout/readme.html",
    "relUrl": "/apps/timer32/tmr32_periodic_timeout/readme.html"
  },"67": {
    "doc": "UART echo blocking",
    "title": "UART echo blocking",
    "content": "This example application demonstrates how to use the UART peripheral to transfer a block of data in a blocking manner. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_echo_blocking/readme.html#uart-echo-blocking",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#uart-echo-blocking"
  },"68": {
    "doc": "UART echo blocking",
    "title": "Description",
    "content": "This example shows the read and write operation over a UART in a blocking manner. The CPU polls the peripheral register continuously to manage the transfer. It receives a line of characters from the terminal window and echoes them back. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_echo_blocking/readme.html#description",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#description"
  },"69": {
    "doc": "UART echo blocking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/uart/uart_echo_blocking/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_echo_blocking/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#downloading-and-building-the-application"
  },"70": {
    "doc": "UART echo blocking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_echo_blocking/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#setting-up-the-hardware"
  },"71": {
    "doc": "UART echo blocking",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Type a line of characters and press the Enter key (NOTE: Number of characters entered before pressing enter key must be less than 256)) | Entered line will be echoed back and the LED is toggled | The following table provides the LED names | . | Board | LED Name | . | CEC 1736 Development Board | LED5 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_echo_blocking/readme.html#running-the-application",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html#running-the-application"
  },"72": {
    "doc": "UART echo blocking",
    "title": "UART echo blocking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_echo_blocking/readme.html",
    "relUrl": "/apps/uart/uart_echo_blocking/readme.html"
  },"73": {
    "doc": "UART ring buffer",
    "title": "UART ring buffer",
    "content": "This example application demonstrates how to use the UART peripheral in ring buffer mode. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_ring_buffer_interrupt/readme.html#uart-ring-buffer",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#uart-ring-buffer"
  },"74": {
    "doc": "UART ring buffer",
    "title": "Description",
    "content": "This example demonstrates read and write over UART using the ring buffer mode. The UART is configured in non-blocking mode (interrupts enabled). The example asks the user to enter 10 characters. Once received, the characters are echoed back. In the process, the example demonstrates various ring buffer APIs. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_ring_buffer_interrupt/readme.html#description",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#description"
  },"75": {
    "doc": "UART ring buffer",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/uart/uart_ring_buffer_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_ring_buffer_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#downloading-and-building-the-application"
  },"76": {
    "doc": "UART ring buffer",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_ring_buffer_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#setting-up-the-hardware"
  },"77": {
    "doc": "UART ring buffer",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Console displays the initial transmit and receive buffer sizes | It then adds 10 characters - “0123456789” to the transmit buffer and displays the available free space in the transmit buffer after the 10 characters have been added | The message asks the user to enter 10 characters | NOTE: For this example, the “Free Space in Transmit Buffer = xx”, where xx can be anything between 117 to 127, depending on the USART baud rate and the CPU execution speed | . | Enter 10 characters on the terminal | Entered characters are echoed back on the console and message is displayed indicating that the receive notification is turned on . | For every 10 characters typed, it will be echoed back on the console . | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_ring_buffer_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html#running-the-application"
  },"78": {
    "doc": "UART ring buffer",
    "title": "UART ring buffer",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/uart/uart_ring_buffer_interrupt/readme.html",
    "relUrl": "/apps/uart/uart_ring_buffer_interrupt/readme.html"
  },"79": {
    "doc": "WDT Timeout",
    "title": "WDT Timeout",
    "content": "This example application demonstrates how to use the WDT peripheral. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/wdt/wdt_timeout/readme.html#wdt-timeout",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#wdt-timeout"
  },"80": {
    "doc": "WDT Timeout",
    "title": "Description",
    "content": "This example application configures the WDT peripheral to generate a reset after 4 seconds. The application toggles an LED and keeps refreshing the WDT every 1 seconds. User can enter a character on the UART terminal to emulate a lockup situation. The application stops toggling the LED and stops refreshing the WDT upon receiving a character on the UART terminal. After 4 seconds, the WDT timer expires and resets the application. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/wdt/wdt_timeout/readme.html#description",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#description"
  },"81": {
    "doc": "WDT Timeout",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/wdt/wdt_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/wdt/wdt_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#downloading-and-building-the-application"
  },"82": {
    "doc": "WDT Timeout",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/wdt/wdt_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#setting-up-the-hardware"
  },"83": {
    "doc": "WDT Timeout",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Observe the LED toogle every 1 second. | Enter a character on the terminal to emulate a lockup situation | Observe the following output on the terminal. WDT should reset the application in 4 seconds. | . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/wdt/wdt_timeout/readme.html#running-the-application",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#running-the-application"
  },"84": {
    "doc": "WDT Timeout",
    "title": "WDT Timeout",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/wdt/wdt_timeout/readme.html",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html"
  },"85": {
    "doc": "CCT Capture mode",
    "title": "CCT Capture mode",
    "content": "This example application demonstrates how to use the Input Capture and Compare Timer peripheral in capture mode. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/cct/cct_capture_mode/readme.html#cct-capture-mode",
    "relUrl": "/apps/cct/cct_capture_mode/readme.html#cct-capture-mode"
  },"86": {
    "doc": "CCT Capture mode",
    "title": "Description",
    "content": "This example application demonstrates how to use the Input Capture and Compare Timer peripheral in capture mode. A PWM signal is generated and fed as input to the input capture module. The input capture module is configured to generate an interrupt on falling edge of the input signal. The demo calculates and displays the frequency of the input signal on to the console. ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/cct/cct_capture_mode/readme.html#description",
    "relUrl": "/apps/cct/cct_capture_mode/readme.html#description"
  },"87": {
    "doc": "CCT Capture mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/cct/cct_capture_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/cct/cct_capture_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cct/cct_capture_mode/readme.html#downloading-and-building-the-application"
  },"88": {
    "doc": "CCT Capture mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | GPIO053 is configured as the PWM output and GPIO050 is configured as the input capture pin | Connect a wire between pin 18 (input capture pin) and pin 20 (PWM output pin) on header P4 | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/cct/cct_capture_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/cct/cct_capture_mode/readme.html#setting-up-the-hardware"
  },"89": {
    "doc": "CCT Capture mode",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/cct/cct_capture_mode/readme.html#running-the-application",
    "relUrl": "/apps/cct/cct_capture_mode/readme.html#running-the-application"
  },"90": {
    "doc": "CCT Capture mode",
    "title": "CCT Capture mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/apps/cct/cct_capture_mode/readme.html",
    "relUrl": "/apps/cct/cct_capture_mode/readme.html"
  },"91": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/csp_apps_cec173x/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"92": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for CEC173x family  v3.4.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | CEC1736 Development Board | 15 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.05 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.3.0 | . | MPLAB® XC32 C/C++ Compiler v4.21 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v340",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v340"
  },"93": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for CEC173x family  v3.3.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | CEC1736 Development Board | 15 | . New Features . | Added new demo applications for WDT, Timer32, RTOS Timer, Hibernation Timer, PWM, Input Capture and Compare Timer and Breathing LED peripherals. | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.05 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.2.2 | . | MPLAB® XC32 C/C++ Compiler v4.21 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v330",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v330"
  },"94": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for CEC173x family  v3.2.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | CEC1736 Development Board | 8 | . New Features . | Added new demo applications for QMSPI, I2C and SMBUS | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.00 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.1.9 | . | MPLAB® XC32 C/C++ Compiler v4.10 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v320",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v320"
  },"95": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for CEC173x family  v3.1.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | CEC1736 Development Board | 3 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.00 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.1.9 | . | MPLAB® XC32 C/C++ Compiler v4.10 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v310",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v310"
  },"96": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for CEC173x family  v3.0.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | CEC 173x Evaluation Board | 3 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.00 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator 5.1.2 | . | MPLAB® XC32 C/C++ Compiler v4.00 | . ",
    "url": "http://localhost:4000/csp_apps_cec173x/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v300",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v300"
  },"97": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_cec173x/release_notes.html",
    "relUrl": "/release_notes.html"
  },"98": {
    "doc": "Harmony 3 peripheral library application examples for CEC173x family",
    "title": "Harmony 3 peripheral library application examples for CEC173x family",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 peripheral library application examples for CEC173x family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 peripheral library application examples for CEC173x family - [Release Notes](/csp_apps_cec173x/release_notes.html) - [MPLAB® Harmony License](/csp_apps_cec173x/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/csp_app_cec173x) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). ## Contents Summary | Folder | Description | --- | --- | apps | Contains peripheral library example applications | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries. | Name | Description | ---- | ----------- | [CCT Capture mode](/csp_apps_cec173x/apps/cct/cct_capture_mode/readme.html) | This example application demonstrates how to use the Input Capture and Compare Timer peripheral in capture mode | [GPIO interrupt](/csp_apps_cec173x/apps/gpio/gpio_led_on_off_interrupt/readme.html) | This example application demonstrate how to generate GPIO interrupt on a pin that is configured to generate an interrupt on either (rising or falling) edge, and indicate the pin status using the LED | [HTM (Hibernation Timer) Timeout](/csp_apps_cec173x/apps/htm/htm_timeout/readme.html) | This example application demonstrates how to generate periodic timeout using the Hibernation timer peripheral | [I2C EEPROM read write](/csp_apps_cec173x/apps/i2c/master/i2c_eeprom/readme.html) | This example application demonstrates how to use the I2C peripheral to write and read from the I2C serial EEPROM memory | [SMBUS master read write](/csp_apps_cec173x/apps/i2c/master/smb_read_write/readme.html) | This example application demonstrates how to use the SMBUS peripheral to read and write data in master mode | [I2C EEPROM emulation (I2C slave)](/csp_apps_cec173x/apps/i2c/slave/i2c_eeprom_emulation/readme.html) | This example application demonstrates how to use the I2C peripheral in slave mode | [SMBUS slave read write](/csp_apps_cec173x/apps/i2c/slave/smb_read_write/readme.html) | This example application demonstrates how to use the SMBUS peripheral to read and write data in slave mode | [LED Breathing](/csp_apps_cec173x/apps/led/led_breathing/readme.html) | This example application demonstrates how to generate a breathing LED pattern using the Breathing LED peripheral | [PWM Duty Cycle](/csp_apps_cec173x/apps/pwm/pwm_duty_cycle/readme.html) | This example application demonstrates how to generate PWM output using the PWM peripheral | [QMSPI flash read write](/csp_apps_cec173x/apps/qmspi/qmspi_read_write/readme.html) | This example shows how to use the QMSPI Peripheral library to perform erase, write and read operation with the QMSPI Serial Flash memory in Quad IO mode | [RTOS Timer](/csp_apps_cec173x/apps/rtos/rtos_timer/readme.html) | This example application demonstrates how to generate periodic timeout using the RTOS timer peripheral | [Timer32 Periodic Timeout](/csp_apps_cec173x/apps/timer32/tmr32_periodic_timeout/readme.html) | This example application demonstrates how to generate periodic timeout using the TIMER32 timer peripheral | [UART echo blocking](/csp_apps_cec173x/apps/uart/uart_echo_blocking/readme.html) | This example application demonstrates how to use the UART peripheral to transfer a block of data in a blocking manner | [UART ring buffer](/csp_apps_cec173x/apps/uart/uart_ring_buffer_interrupt/readme.html) | This example application demonstrates how to use the UART peripheral in ring buffer mode | [WDT Timeout](/csp_apps_cec173x/apps/wdt/wdt_timeout/readme.html) | This example application demonstrates how to use the WDT peripheral | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_cec173x/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/csp_apps_cec173x.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_cec173x/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/csp_apps_cec173x.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_cec173x/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/csp_apps_cec173x.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_cec173x/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/csp_apps_cec173x)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/csp_apps_cec173x.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/csp_apps_cec173x.svg?style=social)]() ",
    "url": "http://localhost:4000/csp_apps_cec173x/",
    "relUrl": "/"
  }
}
